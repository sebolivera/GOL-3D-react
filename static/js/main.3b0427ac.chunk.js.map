{"version":3,"sources":["Utils.js","Game.js","App.js","index.js"],"names":["getRandomInt","max","Math","floor","random","random_box_muller","u","v","num","sqrt","log","cos","PI","getRandomBMInt","neighbors","x","y","board","height","length","width","neighborsTotal","i","min","j","Handle","Slider","Game","props","state","context","paused","btnText","notRestarted","gameSpeed","gridLines","darkMode","tileSize","printLog","arg","console","goLive","timeoutID","setTimeout","live","ticks","draw","beginPath","fillStyle","strokeStyle","fillRect","lineWidth","strokeRect","setState","oldBoard","oldRow","slice","row","push","update","getCell","pause","seedClusters","listSeeds","newBoard","forEach","e","clusterSize","maxClusterSize","pIndex","currentCell","targetCell","density","distance","pow","abs","proximityIndex","clusterDensity","toString","initBoard","setSpeed","clearTimeout","updateSpeed","sliderRanges","updateGridLines","updateMode","document","body","style","backgroundColor","updateTileSize","target","value","canvas","createRef","clusterStarterPercentage","updateWindowDimensions","bind","this","liveCells","rect","ReactDOM","findDOMNode","getBoundingClientRect","pageX","left","pageY","top","undefined","$set","window","addEventListener","removeEventListener","current","getContext","innerWidth","innerHeight","dragging","index","restProps","prefixCls","overlay","visible","placement","onClick","ref","cancel","className","Grid","container","spacing","item","xs","onMouseDown","seedBoard","FormControlLabel","control","Checkbox","defaultChecked","label","onChange","TextField","type","InputProps","inputProps","id","marks","defaultValue","step","handle","Component","App","render","getElementById"],"mappings":"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","file":"static/js/main.3b0427ac.chunk.js","sourcesContent":["export function sigmoid(z, k = 2)\r\n{\r\n    return 1 / (1 + Math.exp(-z / k));\r\n}\r\n\r\nexport function getRandomInt(max)\r\n{\r\n    return Math.floor(Math.random() * max);\r\n\r\n}\r\n\r\nexport function random_box_muller()\r\n{//shamelessly stolen from stackoverflow\r\n    let u = 0, v = 0;\r\n    while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n    while (v === 0) v = Math.random();\r\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\r\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n    if (num > 1 || num < 0) return random_box_muller() // resample between 0 and 1\r\n    return num\r\n}\r\n\r\nexport function getRandomBMInt(max)\r\n{//returns a given int from 0 to max, but with a normal distribution centered around max/2\r\n    return Math.floor(random_box_muller() * max);\r\n}\r\n\r\nexport function proximityIndex(currentCell, targetCell, clusterSize, density = 1)//checks that the currently read cell is within a clusterSize distance of a given cell, and returns a probability (0 to 1) of that cell being filled\r\n{\r\n    let distance = Math.sqrt(Math.pow(currentCell[0] - targetCell[0], 2) + Math.pow(currentCell[1] - targetCell[1], 2));\r\n    return (Math.max(0, (Math.abs(1 - density) + clusterSize - distance) / distance));//actually less legible than I'd like :/\r\n}\r\n\r\nexport function neighbors(x, y, board)\r\n{\r\n    let height = board.length - 1;\r\n    let width = board[0].length - 1;\r\n    let neighborsTotal = 0;\r\n    for (let i = Math.max(0, x - 1); i <= Math.min(x + 1, height); i++)\r\n    {\r\n        for (let j = Math.max(0, y - 1); j <= Math.min(y + 1, width); j++)\r\n        {\r\n            if ((i !== x || j !== y) && board[i][j] === 1)\r\n            {\r\n                neighborsTotal++;\r\n            }\r\n        }\r\n    }\r\n    return neighborsTotal;\r\n}","import React, { createRef, Component } from 'react';\r\nimport { getRandomInt, getRandomBMInt, proximityIndex, neighbors } from './Utils.js';\r\nimport './Game.css';\r\nimport ReactDOM from 'react-dom';\r\nimport update from 'react-addons-update';\r\nimport Slider, { SliderTooltip } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport Draggable from \"react-draggable\";\r\nimport '@fontsource/roboto/300.css';\r\nimport '@fontsource/roboto/400.css';\r\nimport '@fontsource/roboto/500.css';\r\nimport '@fontsource/roboto/700.css';\r\nimport { Checkbox, FormControlLabel, Grid, TextField } from \"@mui/material/\";\r\n\r\nconst { Handle } = Slider;\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvas = createRef();\r\n        this.clusterStarterPercentage = .1;\r\n        this.maxClusterSize = 10;\r\n        this.clusterDensity = 1;\r\n        this.timeoutID = null;\r\n        this.sliderRanges = {\r\n            0: 0.001,\r\n            1: 0.01,\r\n            2: 0.1,\r\n            3: 1,\r\n            4: 2,\r\n            5: 5,\r\n            6: 10,\r\n            7: 25,\r\n            8: 50,\r\n            9: 100\r\n        };\r\n        this.ticks = 1000;\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n    state = {\r\n        board: [],\r\n        width: 0,\r\n        height: 0,\r\n        context: null,\r\n        paused: true,\r\n        btnText: 'Play',\r\n        notRestarted: true,\r\n        gameSpeed: 1,\r\n        gridLines: true,\r\n        darkMode: true,\r\n        tileSize: 10\r\n    }\r\n\r\n\r\n    printLog = (arg) =>//literally just a console.log callback\r\n    {\r\n        console.log('arg:', arg);\r\n    }\r\n\r\n    goLive = () => {\r\n        this.timeoutID = setTimeout(\r\n            () => this.live(),\r\n            this.ticks\r\n        );\r\n    }\r\n\r\n    draw = () => {\r\n        let board = this.state.board;\r\n        let context = this.state.context;\r\n        let gridLines = this.state.gridLines;\r\n        context.beginPath();\r\n        if (this.state.darkMode) {\r\n            context.fillStyle = \"black\";\r\n            context.strokeStyle = 'white';\r\n        }\r\n        else {\r\n            context.fillStyle = \"white\";\r\n            context.strokeStyle = 'black';\r\n        }\r\n        context.fillRect(0, 0, this.state.width, this.state.height);\r\n        context.lineWidth = 0.1;\r\n        if (this.state.darkMode) {\r\n            context.fillStyle = \"lightblue\";\r\n        }\r\n        else {\r\n            context.fillStyle = \"red\";\r\n        }\r\n        let height = board.length;\r\n        let width = board[0].length;\r\n        for (let i = 0; i < height; i++) {\r\n            for (let j = 0; j < width; j++) {\r\n                if (board[i][j] === 1) {\r\n                    context.fillRect(j * this.state.tileSize, i * this.state.tileSize, this.state.tileSize, this.state.tileSize);\r\n                }\r\n                if (gridLines) {\r\n                    context.strokeRect(j * this.state.tileSize, i * this.state.tileSize, this.state.tileSize, this.state.tileSize);\r\n                }\r\n            }\r\n        }\r\n        this.setState({ context: context });\r\n    }\r\n\r\n    live = () => {\r\n        if (!this.state.paused) {\r\n            let height = this.state.board.length;\r\n            let width = this.state.board[0].length;\r\n            let oldBoard = [];// .slice() and [...this.state.board] don't seem to be working for two-dimensional arrays, so I had to resort to this : ...\r\n            let board = [];\r\n            for (let i = 0; i < this.state.board.length; i++) {\r\n                let oldRow = this.state.board[i].slice();\r\n                let row = this.state.board[i].slice();\r\n                oldBoard.push(oldRow);\r\n                board.push(row);\r\n            }\r\n            for (let i = 0; i < height; i++) {\r\n                for (let j = 0; j < width; j++) {\r\n                    let n = neighbors(i, j, oldBoard);\r\n                    switch (n) {\r\n                        case 2:\r\n                            break;\r\n                        case 3:\r\n                            board[i][j] = 1;\r\n                            break;\r\n                        default:\r\n                            board[i][j] = 0;\r\n                    }\r\n                }\r\n            }\r\n            this.setState({ board: board }, this.draw);\r\n            this.goLive();\r\n        }\r\n    }\r\n\r\n    update = () => {\r\n        if (this.state.notRestarted) {\r\n            this.draw();\r\n            this.goLive();\r\n        }\r\n    }\r\n\r\n\r\n    getCell = (i, j) => {\r\n        let x = Math.max(0, Math.min(this.state.board.length - 1, Math.floor(j / this.state.tileSize)));\r\n        let y = Math.max(0, Math.min(this.state.board[0].length - 1, Math.floor(i / this.state.tileSize)));\r\n        return [x, y];\r\n    }\r\n\r\n    pause = () => {\r\n        if (this.state.paused) {\r\n            this.setState({ btnText: 'Pause' });\r\n            this.setState({ paused: false }, this.update);\r\n        }\r\n        else {\r\n            this.setState({ btnText: 'Play' });\r\n            this.setState({ paused: true });\r\n        }\r\n\r\n    }\r\n\r\n    seedClusters = (board, listSeeds) => {\r\n        let newBoard = [...board];\r\n        for (let i = 0; i < newBoard.length; i++) {\r\n            for (let j = 0; j < newBoard[0].length; j++) {\r\n                listSeeds.forEach(e => {\r\n                    let clusterSize = getRandomBMInt(this.maxClusterSize);\r\n                    let pIndex = proximityIndex(e, [i, j], clusterSize, this.clusterDensity);\r\n                    if (pIndex > 0)\r\n                    {\r\n                        let r = Math.random();\r\n                        if (r <= pIndex || e.toString() === [i, j])//random will give a float < 1, same thing for pIndex\r\n                        {\r\n                            newBoard[i][j] = 1;\r\n                        }\r\n                    }\r\n                    board[e[0]][e[1]] = 1;\r\n                });\r\n            }\r\n        }\r\n        return newBoard;\r\n    }\r\n\r\n    seedBoard() {\r\n        let board = [...this.state.board];\r\n        let height = board.length;\r\n        let width = board[0].length;\r\n        let liveCells = (this.clusterStarterPercentage / 100) * (width * height);\r\n        let listSeeds = [];\r\n        while (liveCells > 0) {\r\n            let x = getRandomInt(height);\r\n            let y = getRandomInt(width);\r\n            if (board[x][y] !== 1) {\r\n                board[x][y] = 1;\r\n                listSeeds.push([x, y]);\r\n                liveCells--;\r\n            }\r\n        }\r\n        board = this.seedClusters(board, listSeeds);\r\n\r\n        this.setState({ board: board }, this.draw);\r\n    }\r\n\r\n    initBoard = () => {\r\n        let board = [];\r\n        let height = Math.floor(this.state.height / this.state.tileSize);\r\n        let width = Math.floor(this.state.width / this.state.tileSize);\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < width; j++) {\r\n                row.push(0);\r\n            }\r\n            board.push([...row]);\r\n        }\r\n        this.setState({ board: board }, this.update);\r\n    }\r\n\r\n    onClick(e) {\r\n        var rect = ReactDOM.findDOMNode(this).getBoundingClientRect();\r\n        let i = e.pageX - rect.left;\r\n        let j = e.pageY - rect.top;\r\n        const [x, y] = this.getCell(i, j);\r\n        if ((this.state.board !== undefined) && x < this.state.board.length && y < this.state.board[0].length) {//somehow a click event will randomly be detected outside of bounds\r\n            if (this.state.board[x][y] === 1) {\r\n                this.setState({ board: update(this.state.board, { [x]: { [y]: { $set: 0 } } }) }, this.draw);\r\n                this.goLive();\r\n            }\r\n            else {\r\n                this.setState({ board: update(this.state.board, { [x]: { [y]: { $set: 1 } } }) }, this.draw);\r\n                this.goLive();\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n        clearTimeout(this.timeoutID);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        const context = this.canvas.current.getContext(\"2d\");\r\n        clearTimeout(this.timeoutID);\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight, context: context }, this.initBoard);\r\n    }\r\n\r\n    setSpeed = () => {\r\n        this.ticks = 1000 / (this.state.gameSpeed);\r\n        clearTimeout(this.timeoutID);\r\n        this.timeoutID = setTimeout(\r\n            () => this.live(),\r\n            this.ticks\r\n        );\r\n    }\r\n\r\n    updateSpeed = (e) => {\r\n        this.setState({ gameSpeed: this.sliderRanges[e] }, this.setSpeed);\r\n    }\r\n\r\n    updateGridLines = (e) => {\r\n        this.setState({ gridLines: !this.state.gridLines }, this.draw);\r\n    }\r\n\r\n    updateMode = (e) => {\r\n        if (this.state.darkMode) {\r\n            document.body.style.backgroundColor = \"white\";\r\n        }\r\n        else {\r\n            document.body.style.backgroundColor = \"black\";\r\n        }\r\n        this.setState({ darkMode: !this.state.darkMode }, this.draw);\r\n    }\r\n\r\n    handle(props) {\r\n        const { value, dragging, index, ...restProps } = props;\r\n        let txtValues = {\r\n            0: 'Ultra Slow',\r\n            1: 'Super Slow',\r\n            2: 'Slow',\r\n            3: 'Normal',\r\n            4: 'Slightly Faster',\r\n            5: 'Faster',\r\n            6: 'Fast',\r\n            7: 'Very Fast',\r\n            8: 'Stupid Fast',\r\n            9: 'Why'\r\n        }\r\n        return (\r\n            <SliderTooltip\r\n                prefixCls=\"rc-slider-tooltip\"\r\n                overlay={txtValues[value]}\r\n                visible={dragging}\r\n                placement=\"top\"\r\n                key={index}\r\n            >\r\n                <Handle value={value} {...restProps} />\r\n            </SliderTooltip>\r\n        );\r\n    }\r\n    updateTileSize = (e) => {\r\n        this.setState({ tileSize: e.target.value }, this.initBoard);\r\n        this.draw();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas onClick={this.onClick.bind(this)} ref={this.canvas} width={this.state.width * .98} height={this.state.height * .98} />\r\n                <Draggable cancel=\".rc-slider\">{/* cancel permet de spécifier que l'on ne peut pas déplacer le paneau lorsqu'on touche au slider */}\r\n                    <div className=\"UIWrapper\">\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={3}>\r\n                                <button className=\"genericBtn pausePlay\" onMouseDown={this.pause}>{this.state.btnText}</button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <button className=\"genericBtn clusterizeBtn\" onMouseDown={this.seedBoard.bind(this)}>Clusterize</button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <button className=\"genericBtn restartBtn\" onMouseDown={this.initBoard}>Restart</button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <FormControlLabel control={<Checkbox defaultChecked />} label=\"Show Grid\" onChange={this.updateGridLines.bind(this)} />\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    InputProps={{\r\n                                        inputProps: {\r\n                                            max: Math.floor(this.state.width / 10), min: 1\r\n                                        }\r\n                                    }}\r\n                                    value={this.state.tileSize}\r\n                                    onChange={this.updateTileSize.bind(this)}\r\n                                    label=\"Tile Size\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <FormControlLabel control={<Checkbox defaultChecked />} label=\"DarkMode\" onChange={this.updateMode.bind(this)} />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Slider id='iAmSpeed' min={0} max={9} marks={this.sliderRanges} defaultValue={3} step={null} onChange={this.updateSpeed.bind(this)} handle={this.handle.bind(this)} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Draggable>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport Game from './Game';\r\n\r\n\r\nclass App extends Component{\r\n\r\n  render()\r\n  {\r\n    return(\r\n        <div className=\"App\">\r\n          <Game/>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}