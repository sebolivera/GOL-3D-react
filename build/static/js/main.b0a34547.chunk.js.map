{"version":3,"sources":["Utils.js","Game.js","App.js","index.js"],"names":["getRandomInt","max","Math","floor","random","random_box_muller","u","v","num","sqrt","log","cos","PI","getRandomBMInt","neighbors3D","x","y","z","space","height","length","width","depth","neighborsTotal","i","min","j","k","Handle","Slider","Game","props","state","cubeColorScheme","menuCollapse","arrowPoint","menuShowText","initSpace","scene","background","THREE","renderer","setSize","camera","controls","OrbitControls","domElement","position","update","divElement","appendChild","cubeMatrix","add","cubeCollection","light","effect","OutlineEffect","seedMatrix","seedClusters","listSeeds","frozenMatrix","frozenPlane","frozenRow","push","forEach","row","e","clusterSize","maxClusterSize","pIndex","currentCell","targetCell","density","distance","pow","abs","proximityIndex","clusterDensity","toString","start","updateSpeed","maxTimer","round","speedSlider","updateOutline","outLine","neighbours","minDeath","maxDeath","minLive","maxLive","child","getObjectById","id","material","userData","outlineParameters","thickness","updateDead","showDead","updateOpacity","opacity","updateDeath","updateLife","updateColorScheme","setState","target","value","setColors","handleCollapse","menuTextVal","nval","updateResetOnStalemate","resetOnStaleMate","componentDidMount","a","setTimeout","document","getElementById","classList","updateWindowDimensions","bind","addEventListener","handlePress","createRef","cubeHeight","reset","cubeWidth","cubeDepth","plane","timer","clusterStarterPercentage","paused","undefined","frameId","animate","renderScene","updateCubes","geometry","format","capabilities","isWebGL2","alphaIndex","cubeSlice","cubeLine","colors","Uint8Array","c","gradientMap","needsUpdate","diffuseColor","colorPicker","color","transparent","keepAlive","cube","set","this","liveCells","requestAnimationFrame","cancelAnimationFrame","render","dead","scale","visible","resetMatrix","stop","window","removeEventListener","onResize","obj","children","clearThree","remove","dispose","Object","keys","prop","setHSL","multiplyScalar","n","key","clientWidth","clientHeight","ii","jj","kk","index","dragging","restProps","prefixCls","overlay","placement","className","cancel","Box","container","sx","bgcolor","padding","htmlFor","IconButton","component","onClick","style","transform","Collapse","in","Grid","item","xs","spacing","marks","defaultValue","step","onChange","handle","handleSpeed","handleSliders","range","inverted","trackStyle","backgroundColor","railStyle","minimumTrackStyle","pt","minWidth","FormControl","fullWidth","variant","m","zIndex","InputLabel","Select","MenuProps","label","borderRadius","MenuItem","FormControlLabel","control","Checkbox","defaultChecked","ref","Component","App","ReactDOM"],"mappings":"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","file":"static/js/main.b0a34547.chunk.js","sourcesContent":["export function sigmoid(z, k = 2) {//not mine\n  return 1 / (1 + Math.exp(-z / k));\n}\n\nexport function getRandomInt(max) {//lol\n  return Math.floor(Math.random() * max);\n}\n\nexport function random_box_muller() {//not mine\n  //shamelessly stolen from stackoverflow\n  let u = 0,\n      v = 0;\n  while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n  while (v === 0) v = Math.random();\n  let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n  num = num / 10.0 + 0.5; // Translate to 0 -> 1\n  if (num > 1 || num < 0) return random_box_muller(); // resample between 0 and 1\n  return num;\n}\n\nexport function getRandomBMInt(max) {//not mine\n  //returns a given int from 0 to max, but with a normal distribution centered around max/2\n  return Math.floor(random_box_muller() * max);\n}\n\nexport function proximityIndex(\n  currentCell,\n  targetCell,\n  clusterSize,\n  density = 1\n) {\n  //checks that the currently read cell is within a clusterSize distance of a given cell, and returns a probability (0 to 1) of that cell being filled\n  let distance = Math.sqrt(\n      Math.pow(currentCell[0] - targetCell[0], 2) +\n          Math.pow(currentCell[1] - targetCell[1], 2)\n  );\n  return Math.max(\n      0,\n      (Math.abs(1 - density) + clusterSize - distance) / distance\n  ); //actually less legible than I'd like :/\n}\n\nexport function proximityIndex3D(\n  currentCell,\n  targetCell,\n  clusterSize,\n  density = 1\n) {\n  //checks that the currently read cell is within a clusterSize distance of a given cell, and returns a probability (0 to 1) of that cell being filled\n  let distance = Math.sqrt(\n      Math.pow(currentCell[0] - targetCell[0], 2) +\n          Math.pow(currentCell[1] - targetCell[1], 2) +\n          Math.pow(currentCell[2] - targetCell[2], 2)\n  );\n  return Math.max(\n      0,\n      (Math.abs(1 - density) + clusterSize - distance) / distance\n  ); //actually less legible than I'd like :/\n}\n\nexport function neighbors(x, y, board) {\n  let height = board.length - 1;\n  let width = board[0].length - 1;\n  let neighborsTotal = 0;\n  for (let i = Math.max(0, x - 1); i <= Math.min(x + 1, height); i++) {\n      for (let j = Math.max(0, y - 1); j <= Math.min(y + 1, width); j++) {\n          if ((i !== x || j !== y) && board[i][j] === 1) {\n              neighborsTotal++;\n          }\n      }\n  }\n  return neighborsTotal;\n}\n\nexport function neighbors3D(x, y, z, space) {\n  let height = space.length - 1;\n  let width = space[0].length - 1;\n  let depth = space[0][0].length - 1;\n  let neighborsTotal = 0;\n  for (let i = Math.max(0, x - 1); i <= Math.min(x + 1, height); i++) {\n      for (let j = Math.max(0, y - 1); j <= Math.min(y + 1, width); j++) {\n          for (let k = Math.max(0, z - 1); k <= Math.min(z + 1, depth); k++) {\n          if ((i !== x || j !== y || k !== z) && space[i][j][k] === 1) {\n              neighborsTotal++;\n          }}\n      }\n  }\n  return neighborsTotal;\n}\n\nexport function shuffle (arr) {//not mine\n  var j, x, index;\n  for (index = arr.length - 1; index > 0; index--) {\n      j = Math.floor(Math.random() * (index + 1));\n      x = arr[index];\n      arr[index] = arr[j];\n      arr[j] = x;\n  }\n  return arr;\n}","import React, { createRef, Component } from \"react\";\nimport {\n    getRandomInt,\n    getRandomBMInt,\n    proximityIndex,\n    neighbors3D,\n} from \"./Utils.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport * as THREE from \"three\";\nimport \"./Game.css\";\nimport { OutlineEffect } from \"three/examples/jsm/effects/OutlineEffect.js\";\nimport {\n    Checkbox,\n    FormControlLabel,\n    Grid,\n    InputLabel,\n    MenuItem,\n    FormControl,\n    Box,\n    Select,\n    Collapse,\n    IconButton,\n} from \"@mui/material/\";\nimport \"rc-slider/assets/index.css\";\nimport Slider, { Range, SliderTooltip } from \"rc-slider\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport Draggable from \"react-draggable\";\nconst { Handle } = Slider;\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.divElement = createRef();\n        this.showDead = false;\n        this.cubeHeight = 10;\n        this.resetOnStaleMate = true;\n        this.reset = false;\n        this.cubeWidth = 10;\n        this.cubeDepth = 10;\n        this.outLine = true;\n        this.opacity = 0.65;\n        this.cubeMatrix = [];\n        for (let i = 0; i < this.cubeWidth; i++) {\n            let plane = [];\n            for (let j = 0; j < this.cubeHeight; j++) {\n                let row = [];\n                for (let k = 0; k < this.cubeDepth; k++) {\n                    row.push(0);\n                }\n                plane.push(row);\n            }\n            this.cubeMatrix.push(plane);\n        }\n        this.speedSlider = {\n            0: 0.01,\n            1: 0.025,\n            2: 0.1,\n            3: 0.75,\n            4: 0.1,\n            5: 0.2,\n            6: 0.3,\n            7: 0.4,\n            8: 0.5,\n            9: 1,\n        };\n        this.maxDeath = 8;\n        this.minDeath = 4;\n        this.minLive = 6;\n        this.maxLive = 6;\n        this.timer = 0;\n        this.maxTimer = 4;\n        this.clusterStarterPercentage = 0.1;\n        this.maxClusterSize = 10;\n        this.clusterDensity = 1;\n        this.paused = false;\n        this.renderer = new THREE.WebGLRenderer();\n        this.camera = undefined;\n        this.scene = new THREE.Scene();\n        this.effect = undefined;\n        this.controls = undefined;\n        this.frameId = undefined;\n        this.animate = this.animate.bind(this);\n        this.renderScene = this.renderScene.bind(this);\n        this.handlePress = this.handlePress.bind(this);\n        this.updateCubes = this.updateCubes.bind(this);\n        this.seedMatrix = this.seedMatrix.bind(this);\n        this.seedClusters = this.seedClusters.bind(this);\n        this.updateOpacity = this.updateOpacity.bind(this);\n        this.geometry = new THREE.BoxGeometry(9, 9, 9);\n        this.cubeCollection = [];\n        const format = this.renderer.capabilities.isWebGL2\n            ? THREE.RedFormat\n            : THREE.LuminanceFormat;\n        for (\n            let i = -(this.cubeHeight / 2), alphaIndex = 0;\n            i < this.cubeHeight / 2;\n            i++, alphaIndex += 0.1\n        ) {\n            let cubeSlice = [];\n            for (let j = -(this.cubeWidth / 2); j < this.cubeWidth / 2; j++) {\n                let cubeLine = [];\n\n                const colors = new Uint8Array(alphaIndex + 2);\n\n                for (let c = 0; c <= colors.length; c++) {\n                    colors[c] = (c / colors.length) * 256;\n                }\n\n                const gradientMap = new THREE.DataTexture(\n                    colors,\n                    colors.length,\n                    1,\n                    format\n                );\n                gradientMap.needsUpdate = true;\n                for (\n                    let k = -(this.cubeDepth / 2);\n                    k < this.cubeDepth / 2;\n                    k++\n                ) {\n                    const diffuseColor = this.colorPicker(i, j, k);\n\n                    const material = new THREE.MeshToonMaterial({\n                        color: diffuseColor,\n                        gradientMap: gradientMap,\n                        opacity: this.opacity,\n                        transparent: true,\n                    });\n\n                    material.userData.outlineParameters = {\n                        //NOT IN THE FUCKING DOCUMENTATION\n                        thickness: 0.002,\n                        keepAlive: true,\n                    };\n                    let cube = new THREE.Mesh(this.geometry, material);\n                    cube.position.set(i * 10, j * 10, k * 10);\n                    cubeLine.push(cube);\n                }\n                cubeSlice.push(cubeLine);\n            }\n            this.cubeCollection.push(cubeSlice);\n        }\n    }\n\n    state = {\n        width: 0,\n        height: 0,\n        cubeColorScheme: \"rainbow\",\n        menuCollapse: false,\n        arrowPoint: 180,\n        menuShowText: \"Show\",\n    };\n\n    initSpace = () => {\n        this.scene.background = new THREE.Color(0x444488);\n        this.renderer.setSize(this.state.width, this.state.height);\n        this.camera = new THREE.PerspectiveCamera(\n            75,\n            this.state.width / this.state.height,\n            1,\n            10000\n        );\n        this.controls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement\n        );\n        this.camera.position.z = 150;\n        this.controls.update();\n        this.divElement.appendChild(this.renderer.domElement);\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    this.scene.add(this.cubeCollection[i][j][k]);\n                }\n            }\n        }\n        const light = new THREE.AmbientLight(0xdddddd); //xdddddddddddd\n        this.scene.add(light);\n        this.effect = new OutlineEffect(this.renderer);\n        this.seedMatrix();\n    };\n\n    seedMatrix() {\n        let frozenMatrix = [];\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            let frozenPlane = [];\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                let frozenRow = [];\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    frozenRow.push(0);\n                }\n                frozenPlane.push(frozenRow);\n            }\n            frozenMatrix.push(frozenPlane);\n        }\n\n        let height = frozenMatrix.length;\n        let width = frozenMatrix[0].length;\n        let depth = frozenMatrix[0][0].length;\n        let liveCells =\n            (this.clusterStarterPercentage / 100) * (width * height * depth);\n        let listSeeds = [];\n        while (liveCells > 0) {\n            let x = getRandomInt(height);\n            let y = getRandomInt(width);\n            let z = getRandomInt(depth);\n            if (frozenMatrix[x][y][z] !== 1) {\n                frozenMatrix[x][y][z] = 1;\n                listSeeds.push([x, y, z]);\n                liveCells--;\n            }\n        }\n        this.seedClusters(frozenMatrix, listSeeds);\n    }\n\n    seedClusters = (listSeeds) => {\n        let frozenMatrix = [];\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            let frozenPlane = [];\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                let frozenRow = [];\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    frozenRow.push(this.cubeMatrix[i][j][k]);\n                }\n                frozenPlane.push(frozenRow);\n            }\n            frozenMatrix.push(frozenPlane);\n        }\n\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    listSeeds.forEach((row) => {\n                        row.forEach((e) => {\n                            let clusterSize = getRandomBMInt(\n                                this.maxClusterSize\n                            );\n                            let pIndex = proximityIndex(\n                                e,\n                                [i, j, k],\n                                clusterSize,\n                                this.clusterDensity\n                            ); //Isn't actually all that useful in small grids\n                            if (pIndex > 0) {\n                                let r = Math.random();\n                                if (r <= pIndex || e.toString() === [i, j, k]) {\n                                    this.cubeMatrix[i][j][k] = 1;\n                                }\n                            }\n                            this.cubeMatrix[e[0]][e[1]][e[2]] = 1;\n                        });\n                    });\n                }\n            }\n        }\n        this.start();\n    };\n\n    start() {\n        if (!this.frameId) {\n            this.frameId = requestAnimationFrame(this.animate);\n        }\n    }\n    stop() {\n        cancelAnimationFrame(this.frameId);\n    }\n\n    renderScene() {\n        this.renderer.render(this.scene, this.camera);\n        this.effect.render(this.scene, this.camera);\n    }\n\n    updateCubes() {\n        let frozenMatrix = [];\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            let frozenPlane = [];\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                let frozenRow = [];\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    frozenRow.push(this.cubeMatrix[i][j][k]);\n                }\n                frozenPlane.push(frozenRow);\n            }\n            frozenMatrix.push(frozenPlane);\n        }\n        let dead = true;\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    let neighbours = neighbors3D(i, j, k, this.cubeMatrix);\n                    if (\n                        neighbours <= this.minDeath ||\n                        neighbours > this.maxDeath\n                    ) {\n                        this.cubeMatrix[i][j][k] = 0;\n                    } else if (\n                        neighbours >= this.minLive &&\n                        neighbours <= this.maxLive\n                    ) {\n                        this.cubeMatrix[i][j][k] = 1;\n                    }\n                    let child = this.scene.getObjectById(\n                        this.cubeCollection[i][j][k].id\n                    ); //this wasn't fucking documented\n                    if (child !== undefined) {\n                        if (this.cubeMatrix[i][j][k] === 1) {\n                            child.scale.set(1, 1, 1);\n                            child.visible = true;\n                        } else {\n                            if (this.showDead) {\n                                child.scale.set(0.1, 0.1, 0.1);\n                                child.visible = true;\n                            } else {\n                                child.visible = false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    if (this.cubeMatrix[i][j][k] !== frozenMatrix[i][j][k]) {\n                        dead = false;\n                    }\n                }\n            }\n        }\n        if (dead && this.resetOnStaleMate) {\n            this.reset = true;\n            this.resetMatrix();\n            this.seedMatrix();\n        }\n    }\n\n    animate() {\n        this.controls.update();\n        if (this.timer === 0 && !this.paused) {\n            this.updateCubes();\n        }\n        this.timer++;\n        this.timer %= this.maxTimer;\n        this.renderScene();\n        if (!this.reset) this.frameId = requestAnimationFrame(this.animate);\n    }\n\n    componentWillUnmount() {\n        this.stop();\n        window.removeEventListener(\"resize\", this.onResize);\n        document.removeEventListener(\"keydown\", this.handlePress, false);\n    }\n    clearThree(obj) {\n        while (obj.children.length > 0) {\n            this.clearThree(obj.children[0]);\n            obj.remove(obj.children[0]);\n        }\n        if (obj.geometry) obj.geometry.dispose();\n\n        if (obj.material) {\n            Object.keys(obj.material).forEach((prop) => {\n                if (!obj.material[prop]) return;\n                if (\n                    obj.material[prop] !== null &&\n                    typeof obj.material[prop].dispose === \"function\"\n                )\n                    obj.material[prop].dispose();\n            });\n            obj.material.dispose();\n        }\n    }\n\n    colorPicker(i, j, k) {\n        let diffuseColor;\n        switch (this.state.cubeColorScheme) {\n            case \"rainbow\":\n                diffuseColor = new THREE.Color()\n                    .setHSL(i * 0.1, 0.5, 0.5)\n                    .multiplyScalar(1 - j * 0.02);\n                break;\n            case \"random\":\n                diffuseColor = new THREE.Color()\n                    .setHSL(Math.random(), 0.5, 0.5)\n                    .multiplyScalar(1 - j * 0.02);\n                break;\n            case \"white\":\n                diffuseColor = new THREE.Color().setHSL(1, 1, 1);\n                break;\n            case \"black\":\n                diffuseColor = new THREE.Color().setHSL(0, 0, 0);\n                break;\n            case \"randomBlackAndWhite\":\n                if (Math.random() < 0.5) {\n                    diffuseColor = new THREE.Color()\n                        .setHSL(0, 0, 0)\n                        .multiplyScalar(0);\n                } else {\n                    diffuseColor = new THREE.Color()\n                        .setHSL(1, 1, 1)\n                        .multiplyScalar(1);\n                    break;\n                }\n                break;\n            case \"randomRGB\":\n                let n = Math.random();\n                if (n < 0.333333) {\n                    //red\n                    diffuseColor = new THREE.Color()\n                        .setHSL(0, 1, 0.5)\n                        .multiplyScalar(1);\n                } else if (n < 0.666666) {\n                    //green\n                    diffuseColor = new THREE.Color()\n                        .setHSL(0.333, 1, 0.5)\n                        .multiplyScalar(1);\n                    break;\n                } else {\n                    //blue\n                    diffuseColor = new THREE.Color()\n                        .setHSL(0.66, 1, 0.5)\n                        .multiplyScalar(1);\n                }\n                break;\n            case \"what\":\n                diffuseColor = new THREE.Color().setHSL(\n                    Math.random(),\n                    Math.random(),\n                    Math.random()\n                );\n                break;\n            default:\n                diffuseColor = new THREE.Color()\n                    .setHSL(i * 0.1, 0.5, 0.5)\n                    .multiplyScalar(1 - j * 0.02);\n                break;\n        }\n        return diffuseColor;\n    }\n    resetMatrix() {\n        cancelAnimationFrame(this.frameId);\n        this.frameId = false;\n        this.clearThree(this.scene);\n        this.renderer.state.reset();\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    this.cubeMatrix[i][j][k] = 0;\n                }\n            }\n        }\n        this.cubeCollection = [];\n        const format = this.renderer.capabilities.isWebGL2\n            ? THREE.RedFormat\n            : THREE.LuminanceFormat;\n        for (\n            let i = -(this.cubeHeight / 2), alphaIndex = 0;\n            i < this.cubeHeight / 2;\n            i++, alphaIndex += 0.1\n        ) {\n            let cubeSlice = [];\n            for (let j = -(this.cubeWidth / 2); j < this.cubeWidth / 2; j++) {\n                let cubeLine = [];\n\n                const colors = new Uint8Array(alphaIndex * 0.1 + 2);\n\n                for (let c = 0; c <= colors.length; c++) {\n                    colors[c] = (c / colors.length) * 256;\n                }\n\n                const gradientMap = new THREE.DataTexture(\n                    colors,\n                    colors.length,\n                    1,\n                    format\n                );\n                gradientMap.needsUpdate = true;\n                for (\n                    let k = -(this.cubeDepth / 2);\n                    k < this.cubeDepth / 2;\n                    k++\n                ) {\n                    const diffuseColor = this.colorPicker(i, j, k);\n\n                    const material = new THREE.MeshToonMaterial({\n                        color: diffuseColor,\n                        gradientMap: gradientMap,\n                        opacity: this.opacity,\n                        transparent: true,\n                    });\n\n                    material.userData.outlineParameters = {\n                        //NOT IN THE FUCKING DOCUMENTATION\n                        thickness: 0.002,\n                        keepAlive: true,\n                    };\n\n                    //const mesh = new THREE.Mesh(this.geometry, material);\n                    let cube = new THREE.Mesh(this.geometry, material);\n                    cube.position.set(i * 10, j * 10, k * 10);\n                    cubeLine.push(cube);\n                    this.scene.add(cube);\n                }\n                cubeSlice.push(cubeLine);\n            }\n            this.cubeCollection.push(cubeSlice);\n        }\n        const light = new THREE.AmbientLight(0xdddddd); //aaaaaaaaaaa\n        this.scene.add(light);\n        this.reset = false;\n        this.seedMatrix();\n    }\n\n    handlePress(e) {\n        if (e.key === \"p\") {\n            this.paused = !this.paused;\n        }\n        if (e.key === \"r\") {\n            this.reset = true;\n            this.resetMatrix();\n        }\n        if (e.key === \"+\") {\n            this.maxTimer /= 2;\n        }\n\n        if (e.key === \"-\") {\n            this.maxTimer *= 2;\n        }\n    }\n\n    updateWindowDimensions() {\n        this.setState(\n            {\n                width: this.divElement.clientWidth,\n                height: this.divElement.clientHeight,\n            },\n            this.initSpace\n        );\n    }\n\n    updateSpeed = (e) => {\n        this.maxTimer = Math.round(1 / this.speedSlider[e]);\n    };\n\n    updateOutline = (e) => {\n        this.outLine = !this.outLine;\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    let neighbours = neighbors3D(i, j, k, this.cubeMatrix);\n                    if (\n                        neighbours <= this.minDeath ||\n                        neighbours > this.maxDeath\n                    ) {\n                        this.cubeMatrix[i][j][k] = 0;\n                    } else if (\n                        neighbours >= this.minLive &&\n                        neighbours <= this.maxLive\n                    ) {\n                        this.cubeMatrix[i][j][k] = 1;\n                    }\n                    let child = this.scene.getObjectById(\n                        this.cubeCollection[i][j][k].id\n                    );\n                    if (this.outLine) {\n                        child.material.userData.outlineParameters.thickness = 0.002;\n                    } else {\n                        child.material.userData.outlineParameters.thickness = 0;\n                    }\n                }\n            }\n        }\n    };\n\n    updateDead = (e) => {\n        this.showDead = !this.showDead;\n    };\n\n    updateOpacity = (e) => {\n        this.opacity = e;\n        for (let i = 0; i < this.cubeMatrix.length; i++) {\n            for (let j = 0; j < this.cubeMatrix[0].length; j++) {\n                for (let k = 0; k < this.cubeMatrix[0][0].length; k++) {\n                    let neighbours = neighbors3D(i, j, k, this.cubeMatrix);\n                    if (\n                        neighbours <= this.minDeath ||\n                        neighbours > this.maxDeath\n                    ) {\n                        this.cubeMatrix[i][j][k] = 0;\n                    } else if (\n                        neighbours >= this.minLive &&\n                        neighbours <= this.maxLive\n                    ) {\n                        this.cubeMatrix[i][j][k] = 1;\n                    }\n                    let child = this.scene.getObjectById(\n                        this.cubeCollection[i][j][k].id\n                    );\n                    child.material.opacity = this.opacity;\n                }\n            }\n        }\n    };\n\n    updateDeath = (e) => {\n        this.minDeath = Math.min(e[0], e[1]);\n        this.maxDeath = Math.max(e[0], e[1]);\n    };\n\n    updateLife = (e) => {\n        this.minLive = Math.min(e[0], e[1]);\n        this.maxLive = Math.max(e[0], e[1]);\n    };\n\n    setColors() {\n        const format = this.renderer.capabilities.isWebGL2\n            ? THREE.RedFormat\n            : THREE.LuminanceFormat;\n        for (\n            let i = -(this.cubeHeight / 2), alphaIndex = 0, ii = 0;\n            i < this.cubeHeight / 2;\n            i++, ii++, alphaIndex += 0.1\n        ) {\n            for (\n                let j = -(this.cubeWidth / 2), jj = 0;\n                j < this.cubeWidth / 2;\n                j++, jj++\n            ) {\n                const colors = new Uint8Array(alphaIndex + 2);\n\n                for (let c = 0; c <= colors.length; c++) {\n                    colors[c] = (c / colors.length) * 256;\n                }\n\n                const gradientMap = new THREE.DataTexture(\n                    colors,\n                    colors.length,\n                    1,\n                    format\n                );\n                gradientMap.needsUpdate = true;\n                for (\n                    let k = -(this.cubeDepth / 2), kk = 0;\n                    k < this.cubeDepth / 2;\n                    k++, kk++\n                ) {\n                    const diffuseColor = this.colorPicker(i, j, k);\n                    const material = new THREE.MeshToonMaterial({\n                        color: diffuseColor,\n                        gradientMap: gradientMap,\n                        opacity: this.opacity,\n                        transparent: true,\n                    });\n\n                    material.userData.outlineParameters = {\n                        //NOT IN THE FUCKING DOCUMENTATION\n                        thickness: 0.002,\n                        keepAlive: true,\n                    };\n                    let child = this.scene.getObjectById(\n                        this.cubeCollection[ii][jj][kk].id\n                    );\n                    child.material = material;\n                    if (this.outLine) {\n                        child.material.userData.outlineParameters.thickness = 0.002;\n                    } else {\n                        child.material.userData.outlineParameters.thickness = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    updateColorScheme = (e) => {\n        this.setState({ cubeColorScheme: e.target.value }, this.setColors);\n    };\n\n    handleCollapse = (e) => {\n        let nval = (this.state.arrowPoint + 180) % 360;\n        let menuTextVal;\n        if (this.state.menuShowText === \"Show\") {\n            menuTextVal = \"Hide\";\n        } else {\n            menuTextVal = \"Show\";\n        }\n        this.setState({\n            menuCollapse: !this.state.menuCollapse,\n            arrowPoint: nval,\n            menuShowText: menuTextVal,\n        });\n    };\n    updateResetOnStalemate = (e) => {\n        this.resetOnStaleMate = !this.resetOnStaleMate;\n    };\n    componentDidMount = async () => {\n        setTimeout(() => {\n            document.getElementById(\"pannel\").classList.add(\"mainPannel\");\n        }, 3000);\n        this.updateWindowDimensions();\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        document.addEventListener(\"keydown\", this.handlePress, false);\n    };\n\n    handleSpeed(props) {\n        const { value, dragging, index, ...restProps } = props;\n        let txtValues = {\n            0: \"Ultra Slow\",\n            1: \"Super Slow\",\n            2: \"Slow\",\n            3: \"Normal\",\n            4: \"Slightly Faster\",\n            5: \"Faster\",\n            6: \"Fast\",\n            7: \"Very Fast\",\n            8: \"Stupid Fast\",\n            9: \"Why\",\n        };\n        return (\n            <SliderTooltip\n                prefixCls=\"rc-slider-tooltip\"\n                overlay={txtValues[value]}\n                placement=\"top\"\n                key={index}\n            >\n                <Handle value={value} {...restProps} />\n            </SliderTooltip>\n        );\n    }\n\n    handleSliders(\n        props //grief has 5 different states\n    ) {\n        const { value, dragging, index, ...restProps } = props;\n        return (\n            <SliderTooltip\n                prefixCls=\"rc-slider-tooltip\"\n                overlay={value}\n                visible={dragging}\n                placement=\"top\"\n                key={index}\n            >\n                <Handle value={value} {...restProps} />\n            </SliderTooltip>\n        );\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"mainContainer\">\n                    <Draggable cancel=\".rc-slider\">\n                        <Box\n                            container\n                            sx={{\n                                width: \"33%\",\n                                bgcolor: \"text.secondary\",\n                                padding: \"1vw\",\n                            }}\n                            className=\"container\"\n                        >\n                            <Box id=\"pannel\">\n                                <label htmlFor=\"icon-button-toggle\">\n                                    <IconButton\n                                        color=\"primary\"\n                                        aria-label=\"hide show pannel\"\n                                        component=\"span\"\n                                        onClick={this.handleCollapse}\n                                    >\n                                        <KeyboardArrowDownIcon\n                                            style={{\n                                                transform: `rotate(${this.state.arrowPoint}deg)`,\n                                                color: `white`,\n                                            }}\n                                        />\n                                        <button className=\"aNoStyle white-text\">\n                                            {this.state.menuShowText} menu\n                                        </button>\n                                        {/* needed an anchor tag here cuz the cursor wouldn't change from pointer to the little hand :( */}\n                                    </IconButton>\n                                </label>\n                                <div className=\"noHover\">\n                                    <Collapse in={this.state.menuCollapse}>\n                                        <Grid\n                                            className=\"instructions\"\n                                            item\n                                            xs={12}\n                                        >\n                                            <p>\n                                                Press 'r' to restart (re-seed\n                                                the board)\n                                            </p>\n                                            <p>Press 'p' to pause</p>\n                                            <p>\n                                                Use mouse to orbit around the\n                                                cube\n                                            </p>\n                                        </Grid>\n\n                                        <Grid container spacing={2}>\n                                            <Grid item xs={6}>\n                                                <label>Speed</label>\n                                                <Slider\n                                                    id=\"speedSlider\"\n                                                    className=\"rc-slider\"\n                                                    min={0}\n                                                    max={9}\n                                                    marks={this.speedSlider}\n                                                    defaultValue={3}\n                                                    step={null}\n                                                    onChange={this.updateSpeed.bind(\n                                                        this\n                                                    )}\n                                                    handle={this.handleSpeed.bind(\n                                                        this\n                                                    )}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                <label>Opacity</label>\n                                                <Slider\n                                                    id=\"opacitySlider\"\n                                                    className=\"rc-slider\"\n                                                    min={0}\n                                                    max={1}\n                                                    defaultValue={0.65}\n                                                    step={0.01}\n                                                    onChange={(e) =>\n                                                        this.updateOpacity(e)\n                                                    }\n                                                    handle={this.handleSliders.bind(\n                                                        this\n                                                    )}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                <label>Death range</label>\n                                                <Range\n                                                    id=\"deathSlider\"\n                                                    className=\"rc-slider\"\n                                                    min={0}\n                                                    max={26}\n                                                    range={true}\n                                                    inverted={true}\n                                                    defaultValue={[4, 8]}\n                                                    trackStyle={{\n                                                        backgroundColor: \"grey\",\n                                                    }}\n                                                    railStyle={{\n                                                        backgroundColor: \"red\",\n                                                    }}\n                                                    step={1}\n                                                    onChange={this.updateDeath.bind(\n                                                        this\n                                                    )}\n                                                    handle={this.handleSliders.bind(\n                                                        this\n                                                    )}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={6}>\n                                                <label>Life range</label>\n                                                <Range\n                                                    id=\"lifeSlider\"\n                                                    className=\"rc-slider\"\n                                                    min={0}\n                                                    max={26}\n                                                    range={true}\n                                                    inverted={true}\n                                                    defaultValue={[6, 6]}\n                                                    railStyle={{\n                                                        backgroundColor: \"grey\",\n                                                    }}\n                                                    trackStyle={{\n                                                        backgroundColor:\n                                                            \"green\",\n                                                    }} //broken :/\n                                                    minimumTrackStyle={{\n                                                        backgroundColor:\n                                                            \"green\",\n                                                    }}\n                                                    step={1}\n                                                    onChange={this.updateLife.bind(\n                                                        this\n                                                    )}\n                                                    handle={this.handleSliders.bind(\n                                                        this\n                                                    )}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                        <Grid\n                                            item\n                                            xs={12}\n                                            className=\"controls\"\n                                            pt={2}\n                                        >\n                                            <Grid container>\n                                                <Grid item xs={6}>\n                                                    <Grid item xs={9}>\n                                                        <Box\n                                                            sx={{\n                                                                minWidth: 120,\n                                                            }}\n                                                        >\n                                                            <FormControl\n                                                                fullWidth\n                                                                variant=\"filled\"\n                                                                sx={{\n                                                                    m: 1,\n                                                                    minWidth: 120,\n                                                                    zIndex: 10000,\n                                                                }}\n                                                            >\n                                                                <InputLabel id=\"select-filled-label\">\n                                                                    Color scheme\n                                                                </InputLabel>\n                                                                <Select\n                                                                    MenuProps={{\n                                                                        style: {\n                                                                            zIndex: 35001,\n                                                                        },\n                                                                    }}\n                                                                    value={\n                                                                        this\n                                                                            .state\n                                                                            .cubeColorScheme\n                                                                    }\n                                                                    defaultValue=\"rainbow\"\n                                                                    onChange={this.updateColorScheme.bind(\n                                                                        null\n                                                                    )}\n                                                                    sx={{\n                                                                        color: \"white\",\n                                                                        label: {\n                                                                            color: \"white\",\n                                                                        },\n                                                                        backgroundColor:\n                                                                            \"#d3d3d31c\",\n                                                                        borderRadius:\n                                                                            \"10px\",\n                                                                    }}\n                                                                >\n                                                                    <MenuItem value=\"rainbow\">\n                                                                        Rainbow\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"black\">\n                                                                        Black\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"white\">\n                                                                        White\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"random\">\n                                                                        Random\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"randomBlackAndWhite\">\n                                                                        Random\n                                                                        black\n                                                                        and\n                                                                        white\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"randomRGB\">\n                                                                        Random\n                                                                        RGB\n                                                                    </MenuItem>\n                                                                    <MenuItem value=\"what\">\n                                                                        Even\n                                                                        more\n                                                                        random\n                                                                    </MenuItem>\n                                                                </Select>\n                                                            </FormControl>\n                                                        </Box>\n                                                    </Grid>\n                                                </Grid>\n\n                                                <Grid item xs={6}>\n                                                    <FormControlLabel\n                                                        control={\n                                                            <Checkbox\n                                                                defaultChecked={\n                                                                    false\n                                                                }\n                                                            />\n                                                        }\n                                                        label=\"Show dead cubes (decreases performance)\"\n                                                        onChange={this.updateDead.bind(\n                                                            this\n                                                        )}\n                                                    />\n                                                </Grid>\n\n                                                <Grid item xs={6}>\n                                                    <FormControlLabel\n                                                        control={\n                                                            <Checkbox\n                                                                defaultChecked\n                                                            />\n                                                        }\n                                                        label=\"Auto-reset on stalemate\"\n                                                        onChange={this.updateResetOnStalemate.bind(\n                                                            this\n                                                        )}\n                                                    />\n                                                </Grid>\n\n                                                <Grid item xs={6}>\n                                                    <FormControlLabel\n                                                        control={\n                                                            <Checkbox\n                                                                defaultChecked\n                                                            />\n                                                        }\n                                                        label=\"Show outline\"\n                                                        onChange={this.updateOutline.bind(\n                                                            this\n                                                        )}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Collapse>\n                                </div>\n                            </Box>\n                        </Box>\n                    </Draggable>\n                    <div\n                        className=\"canvasContainer\"\n                        ref={(divElement) => {\n                            this.divElement = divElement;\n                        }}\n                    ></div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Game;\n","import './App.css';\nimport React, { Component } from 'react';\nimport Game from './Game';\n\n\nclass App extends Component{\n\n  render()\n  {\n    return(\n        <div className=\"App\">\n          <Game/>\n        </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}